name: Build, test and deploy Ragger

on:
  workflow_dispatch:
  push:
    branches:
      - master
      - main
      - develop
  pull_request:

jobs:
  build_boilerplate_application:
    name: Build boilerplate application using the reusable workflow
    uses: LedgerHQ/ledger-app-workflows/.github/workflows/reusable_build.yml@v1
    with:
      app_repository: LedgerHQ/app-boilerplate
      app_branch_name: master
      upload_app_binaries_artifact: boilerplate_binaries

  build_install_test:
    name: Install and test the library
    needs: build_boilerplate_application
    runs-on: ubuntu-latest

    steps:
    - name: Clone
      uses: actions/checkout@v3

    - name: Speculos dependencies
      run: sudo apt-get update && sudo apt-get install -y qemu-user-static tesseract-ocr libtesseract-dev

    - name: Build & install
      run: |
        pip install --extra-index-url https://test.pypi.org/simple/ -U .[tests,all_backends]
        pip install -U click>=8

    - name: Download app binaries
      uses: actions/download-artifact@v3
      with:
        name: boilerplate_binaries
        path: ./build/

    - name: Check the downloaded files
      run: tree .

    - name: Run tests and generate coverage
      run: pytest -v --tb=short tests/ --cov ragger --cov-report xml --device all

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v1
      with:
        name: codecov-ragger

  package_and_deploy:
    name: Build and deploy Ragger Python Package
    needs: [build_install_test]
    runs-on: ubuntu-latest
    steps:

    - name: Clone
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Get Ragger version
      id: version
      run: |
        echo "##[set-output name=version;]$(cat src/ragger/__init__.py  | grep __version__ | cut -d ' ' -f 3 | sed s/\"//g)";
        echo "Version registered: ${{ steps.version.outputs.version }}"

    - name: Build Ragger python package
      run: |
        pip install --upgrade pip build twine
        PIP_EXTRA_INDEX_URL=https://test.pypi.org/simple/ python -m build
        python -m twine check dist/*

    - name: Publish Python package on test.pypi.org
      if: success() && github.event_name == 'push' && github.ref == 'refs/heads/develop' && contains(github.event.head_commit.message, 'release')
      run: python -m twine upload --repository testpypi dist/*
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.TEST_PYPI_PUBLIC_API_TOKEN  }}
        TWINE_NON_INTERACTIVE: 1

    - name: Publish Python package on pypi.org
      if: success() && github.event_name == 'push' && github.ref == 'refs/heads/master' && contains(github.event.head_commit.message, 'release')
      run: python -m twine upload dist/*
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_PUBLIC_API_TOKEN  }}
        TWINE_NON_INTERACTIVE: 1

    - name: Publish a release on the repo
      if: success() && github.event_name == 'push' && contains(fromJSON('["refs/heads/develop", "refs/heads/master"]'), github.ref) && contains(github.event.head_commit.message, 'release')
      uses: "marvinpinto/action-automatic-releases@latest"
      with:
        automatic_release_tag: "v${{ steps.version.outputs.version }}"
        repo_token: "${{ secrets.GITHUB_TOKEN }}"
        prerelease: true
        files: |
          LICENSE
          dist/
